// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devcommon.proto

package zconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// XXX duplicate of definition in zmet.proto with uniq names (ZCio vs Zio)
// Types of I/O adapters that can be assigned to applications
type ZCioType int32

const (
	ZCioType_ZCioNop   ZCioType = 0
	ZCioType_ZCioEth   ZCioType = 1
	ZCioType_ZCioUSB   ZCioType = 2
	ZCioType_ZCioCOM   ZCioType = 3
	ZCioType_ZCioHDMI  ZCioType = 4
	ZCioType_ZCioOther ZCioType = 255
)

var ZCioType_name = map[int32]string{
	0:   "ZCioNop",
	1:   "ZCioEth",
	2:   "ZCioUSB",
	3:   "ZCioCOM",
	4:   "ZCioHDMI",
	255: "ZCioOther",
}

var ZCioType_value = map[string]int32{
	"ZCioNop":   0,
	"ZCioEth":   1,
	"ZCioUSB":   2,
	"ZCioCOM":   3,
	"ZCioHDMI":  4,
	"ZCioOther": 255,
}

func (x ZCioType) String() string {
	return proto.EnumName(ZCioType_name, int32(x))
}

func (ZCioType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c2bb9fc347232ae8, []int{0}
}

type ZcServiceType int32

const (
	ZcServiceType_zcloudInvalidSrv ZcServiceType = 0
	// mapping service for zededa overlay service
	ZcServiceType_mapServer ZcServiceType = 1
	// if device has support feature enabled, this is cloud service from
	// device can be reached
	ZcServiceType_supportServer ZcServiceType = 2
)

var ZcServiceType_name = map[int32]string{
	0: "zcloudInvalidSrv",
	1: "mapServer",
	2: "supportServer",
}

var ZcServiceType_value = map[string]int32{
	"zcloudInvalidSrv": 0,
	"mapServer":        1,
	"supportServer":    2,
}

func (x ZcServiceType) String() string {
	return proto.EnumName(ZcServiceType_name, int32(x))
}

func (ZcServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c2bb9fc347232ae8, []int{1}
}

type UUIDandVersion struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UUIDandVersion) Reset()         { *m = UUIDandVersion{} }
func (m *UUIDandVersion) String() string { return proto.CompactTextString(m) }
func (*UUIDandVersion) ProtoMessage()    {}
func (*UUIDandVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2bb9fc347232ae8, []int{0}
}

func (m *UUIDandVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UUIDandVersion.Unmarshal(m, b)
}
func (m *UUIDandVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UUIDandVersion.Marshal(b, m, deterministic)
}
func (m *UUIDandVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UUIDandVersion.Merge(m, src)
}
func (m *UUIDandVersion) XXX_Size() int {
	return xxx_messageInfo_UUIDandVersion.Size(m)
}
func (m *UUIDandVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_UUIDandVersion.DiscardUnknown(m)
}

var xxx_messageInfo_UUIDandVersion proto.InternalMessageInfo

func (m *UUIDandVersion) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *UUIDandVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Adapter bundles corresponding to a subset of what is in ZioBundle
type Adapter struct {
	Type                 ZCioType `protobuf:"varint,1,opt,name=type,proto3,enum=ZCioType" json:"type,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Adapter) Reset()         { *m = Adapter{} }
func (m *Adapter) String() string { return proto.CompactTextString(m) }
func (*Adapter) ProtoMessage()    {}
func (*Adapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2bb9fc347232ae8, []int{1}
}

func (m *Adapter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Adapter.Unmarshal(m, b)
}
func (m *Adapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Adapter.Marshal(b, m, deterministic)
}
func (m *Adapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Adapter.Merge(m, src)
}
func (m *Adapter) XXX_Size() int {
	return xxx_messageInfo_Adapter.Size(m)
}
func (m *Adapter) XXX_DiscardUnknown() {
	xxx_messageInfo_Adapter.DiscardUnknown(m)
}

var xxx_messageInfo_Adapter proto.InternalMessageInfo

func (m *Adapter) GetType() ZCioType {
	if m != nil {
		return m.Type
	}
	return ZCioType_ZCioNop
}

func (m *Adapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// This is way to tell the device if there is service in cloud somewhere,
// what type it is how to access it
type ZcServicePoint struct {
	ZsType               ZcServiceType `protobuf:"varint,3,opt,name=zsType,proto3,enum=ZcServiceType" json:"zsType,omitempty"`
	NameOrIp             string        `protobuf:"bytes,1,opt,name=NameOrIp,proto3" json:"NameOrIp,omitempty"`
	Credential           string        `protobuf:"bytes,2,opt,name=Credential,proto3" json:"Credential,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ZcServicePoint) Reset()         { *m = ZcServicePoint{} }
func (m *ZcServicePoint) String() string { return proto.CompactTextString(m) }
func (*ZcServicePoint) ProtoMessage()    {}
func (*ZcServicePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2bb9fc347232ae8, []int{2}
}

func (m *ZcServicePoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZcServicePoint.Unmarshal(m, b)
}
func (m *ZcServicePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZcServicePoint.Marshal(b, m, deterministic)
}
func (m *ZcServicePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZcServicePoint.Merge(m, src)
}
func (m *ZcServicePoint) XXX_Size() int {
	return xxx_messageInfo_ZcServicePoint.Size(m)
}
func (m *ZcServicePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ZcServicePoint.DiscardUnknown(m)
}

var xxx_messageInfo_ZcServicePoint proto.InternalMessageInfo

func (m *ZcServicePoint) GetZsType() ZcServiceType {
	if m != nil {
		return m.ZsType
	}
	return ZcServiceType_zcloudInvalidSrv
}

func (m *ZcServicePoint) GetNameOrIp() string {
	if m != nil {
		return m.NameOrIp
	}
	return ""
}

func (m *ZcServicePoint) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

func init() {
	proto.RegisterEnum("ZCioType", ZCioType_name, ZCioType_value)
	proto.RegisterEnum("ZcServiceType", ZcServiceType_name, ZcServiceType_value)
	proto.RegisterType((*UUIDandVersion)(nil), "UUIDandVersion")
	proto.RegisterType((*Adapter)(nil), "Adapter")
	proto.RegisterType((*ZcServicePoint)(nil), "ZcServicePoint")
}

func init() { proto.RegisterFile("devcommon.proto", fileDescriptor_c2bb9fc347232ae8) }

var fileDescriptor_c2bb9fc347232ae8 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xdf, 0xef, 0xd2, 0x30,
	0x14, 0xc5, 0xbf, 0x03, 0x02, 0xec, 0x2a, 0xb3, 0x36, 0x3e, 0x2c, 0x26, 0xfe, 0x08, 0x31, 0xc6,
	0xf0, 0xb0, 0x25, 0xfa, 0x6a, 0x4c, 0x04, 0x0c, 0xee, 0x01, 0x30, 0x20, 0x3e, 0x10, 0x5f, 0xca,
	0x7a, 0x85, 0x46, 0xd6, 0x36, 0x5d, 0xb7, 0x84, 0xfd, 0xf3, 0x9a, 0x75, 0x1b, 0xd1, 0xb7, 0x7b,
	0xce, 0x3d, 0xf7, 0xd3, 0x93, 0x14, 0x9e, 0x70, 0x2c, 0x53, 0x95, 0x65, 0x4a, 0x46, 0xda, 0x28,
	0xab, 0xa6, 0x9f, 0x20, 0x38, 0x1c, 0x92, 0x25, 0x93, 0xfc, 0x07, 0x9a, 0x5c, 0x28, 0x49, 0x29,
	0x0c, 0x8a, 0x42, 0xf0, 0xd0, 0x7b, 0xed, 0xbd, 0xf3, 0x77, 0x6e, 0xa6, 0x21, 0x8c, 0xca, 0x66,
	0x1d, 0xf6, 0x9c, 0xdd, 0xc9, 0xe9, 0x47, 0x18, 0x7d, 0xe6, 0x4c, 0x5b, 0x34, 0xf4, 0x05, 0x0c,
	0xec, 0x4d, 0xa3, 0x3b, 0x0c, 0xde, 0xfb, 0xd1, 0x71, 0x21, 0xd4, 0xf7, 0x9b, 0xc6, 0x9d, 0xb3,
	0x6b, 0xae, 0x64, 0x19, 0xb6, 0x00, 0x37, 0x4f, 0x2d, 0x04, 0xc7, 0x74, 0x8f, 0xa6, 0x14, 0x29,
	0x7e, 0x53, 0x42, 0x5a, 0xfa, 0x16, 0x86, 0x55, 0x5e, 0x5f, 0x85, 0x7d, 0x87, 0x09, 0xa2, 0x7b,
	0xc0, 0xb1, 0xda, 0x2d, 0x7d, 0x0e, 0xe3, 0x0d, 0xcb, 0x70, 0x6b, 0x12, 0xdd, 0x36, 0xbd, 0x6b,
	0xfa, 0x12, 0x60, 0x61, 0x90, 0xa3, 0xb4, 0x82, 0x5d, 0xdb, 0xf7, 0xfe, 0x71, 0x66, 0x3f, 0x61,
	0xdc, 0x75, 0xa3, 0x8f, 0x60, 0x54, 0xcf, 0x1b, 0xa5, 0xc9, 0x43, 0x27, 0xbe, 0xd8, 0x0b, 0xf1,
	0x3a, 0x71, 0xd8, 0xcf, 0x49, 0xaf, 0x13, 0x8b, 0xed, 0x9a, 0xf4, 0xe9, 0xe3, 0xe6, 0xfe, 0xeb,
	0x72, 0x9d, 0x90, 0x01, 0x0d, 0xc0, 0xaf, 0xd5, 0xd6, 0x5e, 0xd0, 0x90, 0x3f, 0xde, 0x6c, 0x05,
	0x93, 0xff, 0x2a, 0xd3, 0x67, 0x40, 0xaa, 0xf4, 0xaa, 0x0a, 0x9e, 0xc8, 0x92, 0x5d, 0x05, 0xdf,
	0x9b, 0x92, 0x3c, 0xd0, 0x09, 0xf8, 0x19, 0xd3, 0x75, 0x0e, 0x0d, 0xf1, 0xe8, 0x53, 0x98, 0xe4,
	0x85, 0xd6, 0xca, 0xd8, 0xd6, 0xea, 0xcd, 0x57, 0xf0, 0x2a, 0x55, 0x59, 0x54, 0x21, 0x47, 0xce,
	0x22, 0x47, 0x88, 0x8a, 0xbc, 0x01, 0x37, 0xbf, 0x77, 0x7c, 0x73, 0x16, 0xf6, 0x52, 0x9c, 0xa2,
	0x54, 0x65, 0x71, 0x93, 0x8b, 0xb1, 0xc4, 0x38, 0xe7, 0xbf, 0xe3, 0xb3, 0x8a, 0xab, 0x54, 0xc9,
	0x5f, 0xe2, 0x7c, 0x1a, 0xba, 0xf0, 0x87, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x3d, 0x4d,
	0x10, 0xfd, 0x01, 0x00, 0x00,
}
