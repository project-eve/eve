// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vm.proto

package zconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// For now we need to tell the device which virtualization mode
// to use. Later we might use a single one for all VMs (on any particular
// ISA). If we end up keeping this we should make the names be less
// tied to a particular hypervisor.
type VmMode int32

const (
	VmMode_PV  VmMode = 0
	VmMode_HVM VmMode = 1
)

var VmMode_name = map[int32]string{
	0: "PV",
	1: "HVM",
}

var VmMode_value = map[string]int32{
	"PV":  0,
	"HVM": 1,
}

func (x VmMode) String() string {
	return proto.EnumName(VmMode_name, int32(x))
}

func (VmMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{0}
}

type VmConfig struct {
	Kernel               string   `protobuf:"bytes,1,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Ramdisk              string   `protobuf:"bytes,2,opt,name=ramdisk,proto3" json:"ramdisk,omitempty"`
	Memory               uint32   `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Maxmem               uint32   `protobuf:"varint,4,opt,name=maxmem,proto3" json:"maxmem,omitempty"`
	Vcpus                uint32   `protobuf:"varint,5,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	Maxcpus              uint32   `protobuf:"varint,6,opt,name=maxcpus,proto3" json:"maxcpus,omitempty"`
	Rootdev              string   `protobuf:"bytes,7,opt,name=rootdev,proto3" json:"rootdev,omitempty"`
	Extraargs            string   `protobuf:"bytes,8,opt,name=extraargs,proto3" json:"extraargs,omitempty"`
	Bootloader           string   `protobuf:"bytes,9,opt,name=bootloader,proto3" json:"bootloader,omitempty"`
	Cpus                 string   `protobuf:"bytes,10,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Devicetree           string   `protobuf:"bytes,11,opt,name=devicetree,proto3" json:"devicetree,omitempty"`
	Dtdev                []string `protobuf:"bytes,12,rep,name=dtdev,proto3" json:"dtdev,omitempty"`
	Irqs                 []uint32 `protobuf:"varint,13,rep,packed,name=irqs,proto3" json:"irqs,omitempty"`
	Iomem                []string `protobuf:"bytes,14,rep,name=iomem,proto3" json:"iomem,omitempty"`
	VirtualizationMode   VmMode   `protobuf:"varint,15,opt,name=virtualizationMode,proto3,enum=VmMode" json:"virtualizationMode,omitempty"`
	EnableVnc            bool     `protobuf:"varint,16,opt,name=enableVnc,proto3" json:"enableVnc,omitempty"`
	VncDisplay           uint32   `protobuf:"varint,17,opt,name=vncDisplay,proto3" json:"vncDisplay,omitempty"`
	VncPasswd            string   `protobuf:"bytes,18,opt,name=vncPasswd,proto3" json:"vncPasswd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmConfig) Reset()         { *m = VmConfig{} }
func (m *VmConfig) String() string { return proto.CompactTextString(m) }
func (*VmConfig) ProtoMessage()    {}
func (*VmConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab246c8c7c5372d, []int{0}
}

func (m *VmConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmConfig.Unmarshal(m, b)
}
func (m *VmConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmConfig.Marshal(b, m, deterministic)
}
func (m *VmConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmConfig.Merge(m, src)
}
func (m *VmConfig) XXX_Size() int {
	return xxx_messageInfo_VmConfig.Size(m)
}
func (m *VmConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VmConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VmConfig proto.InternalMessageInfo

func (m *VmConfig) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

func (m *VmConfig) GetRamdisk() string {
	if m != nil {
		return m.Ramdisk
	}
	return ""
}

func (m *VmConfig) GetMemory() uint32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *VmConfig) GetMaxmem() uint32 {
	if m != nil {
		return m.Maxmem
	}
	return 0
}

func (m *VmConfig) GetVcpus() uint32 {
	if m != nil {
		return m.Vcpus
	}
	return 0
}

func (m *VmConfig) GetMaxcpus() uint32 {
	if m != nil {
		return m.Maxcpus
	}
	return 0
}

func (m *VmConfig) GetRootdev() string {
	if m != nil {
		return m.Rootdev
	}
	return ""
}

func (m *VmConfig) GetExtraargs() string {
	if m != nil {
		return m.Extraargs
	}
	return ""
}

func (m *VmConfig) GetBootloader() string {
	if m != nil {
		return m.Bootloader
	}
	return ""
}

func (m *VmConfig) GetCpus() string {
	if m != nil {
		return m.Cpus
	}
	return ""
}

func (m *VmConfig) GetDevicetree() string {
	if m != nil {
		return m.Devicetree
	}
	return ""
}

func (m *VmConfig) GetDtdev() []string {
	if m != nil {
		return m.Dtdev
	}
	return nil
}

func (m *VmConfig) GetIrqs() []uint32 {
	if m != nil {
		return m.Irqs
	}
	return nil
}

func (m *VmConfig) GetIomem() []string {
	if m != nil {
		return m.Iomem
	}
	return nil
}

func (m *VmConfig) GetVirtualizationMode() VmMode {
	if m != nil {
		return m.VirtualizationMode
	}
	return VmMode_PV
}

func (m *VmConfig) GetEnableVnc() bool {
	if m != nil {
		return m.EnableVnc
	}
	return false
}

func (m *VmConfig) GetVncDisplay() uint32 {
	if m != nil {
		return m.VncDisplay
	}
	return 0
}

func (m *VmConfig) GetVncPasswd() string {
	if m != nil {
		return m.VncPasswd
	}
	return ""
}

func init() {
	proto.RegisterEnum("VmMode", VmMode_name, VmMode_value)
	proto.RegisterType((*VmConfig)(nil), "VmConfig")
}

func init() { proto.RegisterFile("vm.proto", fileDescriptor_cab246c8c7c5372d) }

var fileDescriptor_cab246c8c7c5372d = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x40, 0xc9, 0x66, 0x37, 0x6d, 0x0d, 0x5d, 0x8a, 0x85, 0x90, 0x91, 0x10, 0x44, 0x88, 0x43,
	0xc4, 0x21, 0x91, 0xe0, 0xc0, 0x1d, 0x90, 0xe0, 0xb2, 0xd2, 0x2a, 0x87, 0x1c, 0xb8, 0xb9, 0xf6,
	0x50, 0xac, 0xc6, 0x99, 0x62, 0x27, 0xa6, 0xdb, 0x7f, 0x47, 0x42, 0x1e, 0x77, 0x69, 0x0f, 0x7b,
	0xf3, 0x7b, 0x33, 0xe3, 0x19, 0x8f, 0xcc, 0xe6, 0xc1, 0xd6, 0x3b, 0x87, 0x23, 0xbe, 0xfd, 0x9b,
	0xb3, 0x79, 0x67, 0xbf, 0xe0, 0xf0, 0xd3, 0x6c, 0xf8, 0x0b, 0x56, 0x6c, 0xc1, 0x0d, 0xd0, 0x8b,
	0xac, 0xcc, 0xaa, 0x45, 0x7b, 0x24, 0x2e, 0xd8, 0xcc, 0x49, 0xab, 0x8d, 0xdf, 0x8a, 0x0b, 0x0a,
	0xdc, 0x63, 0xac, 0xb0, 0x60, 0xd1, 0xdd, 0x89, 0xbc, 0xcc, 0xaa, 0x65, 0x7b, 0x24, 0xf2, 0x72,
	0x6f, 0xc1, 0x8a, 0xcb, 0xa3, 0x27, 0xe2, 0xcf, 0xd9, 0x55, 0x50, 0xbb, 0xc9, 0x8b, 0x2b, 0xd2,
	0x09, 0xe2, 0xfd, 0x56, 0xee, 0xc9, 0x17, 0xe4, 0xef, 0x91, 0x3a, 0x23, 0x8e, 0x1a, 0x82, 0x98,
	0x1d, 0x3b, 0x27, 0xe4, 0xaf, 0xd8, 0x02, 0xf6, 0xa3, 0x93, 0xd2, 0x6d, 0xbc, 0x98, 0x53, 0xec,
	0x24, 0xf8, 0x6b, 0xc6, 0xd6, 0x88, 0x63, 0x8f, 0x52, 0x83, 0x13, 0x0b, 0x0a, 0x9f, 0x19, 0xce,
	0xd9, 0x25, 0xb5, 0x63, 0x14, 0xa1, 0x73, 0xac, 0xd1, 0x10, 0x8c, 0x82, 0xd1, 0x01, 0x88, 0xc7,
	0xa9, 0xe6, 0x64, 0xe2, 0xec, 0x9a, 0x26, 0x79, 0x52, 0xe6, 0xd5, 0xa2, 0x4d, 0x10, 0x6f, 0x32,
	0xee, 0xb7, 0x17, 0xcb, 0x32, 0xaf, 0x96, 0x2d, 0x9d, 0x63, 0xa6, 0xc1, 0xf8, 0xf8, 0xeb, 0x94,
	0x49, 0xc0, 0x3f, 0x31, 0x1e, 0x8c, 0x1b, 0x27, 0xd9, 0x9b, 0x83, 0x1c, 0x0d, 0x0e, 0x37, 0xa8,
	0x41, 0x3c, 0x2d, 0xb3, 0xea, 0xfa, 0xc3, 0xac, 0xee, 0x6c, 0xc4, 0xf6, 0x81, 0x14, 0x7a, 0xea,
	0x20, 0xd7, 0x3d, 0x74, 0x83, 0x12, 0xab, 0x32, 0xab, 0xe6, 0xed, 0x49, 0xc4, 0xb1, 0xc3, 0xa0,
	0xbe, 0x1a, 0xbf, 0xeb, 0xe5, 0x9d, 0x78, 0x46, 0xfb, 0x3b, 0x33, 0xb1, 0x3a, 0x0c, 0xea, 0x56,
	0x7a, 0xff, 0x47, 0x0b, 0x9e, 0x16, 0xf5, 0x5f, 0xbc, 0x7f, 0xc9, 0x8a, 0xd4, 0x99, 0x17, 0xec,
	0xe2, 0xb6, 0x5b, 0x3d, 0xe2, 0x33, 0x96, 0x7f, 0xef, 0x6e, 0x56, 0xd9, 0xe7, 0x6f, 0xec, 0x8d,
	0x42, 0x5b, 0x1f, 0x40, 0x83, 0x96, 0xb5, 0xea, 0x71, 0xd2, 0xf5, 0xe4, 0xc1, 0xc5, 0x85, 0xa4,
	0xdf, 0xf3, 0xe3, 0xdd, 0xc6, 0x8c, 0xbf, 0xa6, 0x75, 0xad, 0xd0, 0x36, 0x29, 0xaf, 0x81, 0x00,
	0x8d, 0xd7, 0xdb, 0x66, 0x83, 0xcd, 0x41, 0xd1, 0xb7, 0x5a, 0x17, 0x94, 0xfc, 0xf1, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xab, 0xc9, 0x11, 0x2c, 0x76, 0x02, 0x00, 0x00,
}
